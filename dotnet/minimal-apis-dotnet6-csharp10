<!DOCTYPE html>
<html lang="en-US" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />
		<title>Overview of Minimal APIs with .NET 6 and C# 10</title>
		<link rel="shortcut icon" href="/wwwroot/favicon.ico" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
        <meta name="language" content="en" />
		<meta name="keywords" content=".NET,.NET 6,.NET 7,csharp,C#,Minimal API,Minimal APIs,.NET API development,C# 9, C# 10" />
		<meta name="description" content="Overview of Minimal APIs with .NET 6 and C# 10. What is it? How it works? Is it great?" />
		<meta name="author" content="Adrien Torris" />
		<meta name="robots" content="index,follow" />
		<!--<meta name="generator" content="SiteUp! 0.1" />-->
		<link href="/wwwroot/css/style.css" rel="stylesheet" />
		<script defer src="https://use.fontawesome.com/releases/v5.0.7/js/all.js"></script>
	</head>
	<body>
		<div id="main_ctn" class="post_ctn">
			<header>
				<div id="header-content">
					<h2>Blog</h2>
					<ul id="social_links">
						<li id="twitter_link">
							<a href="https://twitter.com/AdrienTorris" target="_Blank" rel="nofollow" title="Adrien Torris sur Twitter">
								<i class="fab fa-twitter fa-2x"></i>
							</a>
						</li>
						<li id="github_link" title="Adrien Torris sur GitHub">
							<a href="https://github.com/AdrienTorris" target="_Blank" rel="nofollow">
								<i class="fab fa-github fa-2x"></i>
							</a>
						</li>
						<li id="so_link">
							<a href="https://stackoverflow.com/users/4428633/adrientorris" target="_Blank" rel="nofollow" title="Adrien Torris sur StackOverflow">
								<i class="fab fa-stack-overflow fa-2x"></i>
							</a>
						</li>
						<li id="linkedin_link">
							<a href="https://www.linkedin.com/in/adrientorris/" target="_Blank" rel="nofollow" title="Adrien Torris sur LinkedIn">
								<i class="fab fa-linkedin fa-2x"></i>
							</a>
						</li>
					</ul>
				</div>
			</header>
			<div id="arianne_wrapper">
				<ul>
					<li><a href="https://adrientorris.github.io/index.html" title="Technical blog of Adrien Torris (Blazor, .NET Core, ASP.NET Core, .NET, ASP.NET, C# ...)">Home</a></li>
					<li>.NET</li>
					<li class="active"><a href="https://adrientorris.github.io/dotnet/minimal-apis-dotnet6-csharp10" title="Overview of Minimal APIs with .NET 6 and C# 10">Overview of Minimal APIs with .NET 6 and C# 10</a></li>
				</ul>
			</div>
			<div id="post_ctn">
			<h1>Overview of Minimal APIs with .NET 6 and C# 10</h1>
<h2>What are minimal APIs ?</h2>
<q>An unopiniatonated way to build high performance APIs in .NET with the minimal amount of implicitly added features and the maximal amount of flexibility to explicitly opt in the features and the structure that you need</q>
<p>Nick Chaspas, NDC London 2022</p>
<p>The Minimal APIs journey start with the will of the .NET development team to allow developers to embrace minimalism. We speak a lot for years now about how to avoid massive monotlithic applications and to prefer microservices but .NET never offered a way to really create minimal APIs. The reason is because APIs are based on the MVC layer so they ineherit from a lot of useless code which make them more complex and resources-cosuming than they should be. Minimal APIs are the answer of the .NET team of all this useless complexity. Now, .NET, like the majority of the others development languages, offers a way to create really minimal APIs with just what you need inside. Regarding that, Minimal APIs are a major .NET feature.</p>
<h2>Minimal APIs is not a new concept</h2>
<p>Even if they didn't exist in .NET, minimal APIs are existing for years now in other development environments.</p>
<p style="font-weight:700;padding-left:25px;">Node.Json</p>
<pre><code class="nodejs">

</code></pre>
<p style="font-weight:700;padding-left:25px;">Node.JS</p>
<pre><code class="nodejs">
const express = require('express')
const app = express()
const port = 3000

app.get('hello world', (req, res) => { req.send('Hello World!'); })

app.listen(port)
</code></pre>
<p style="font-weight:700;padding-left:25px;">GO - GIN</p>
<pre><code class="go">
import {
     "github.com/gin-gonic/gin",
"net/http"
}

func main() {
     r := gin.default()

r.GET("/", func(c *gin.Context){
     c.String(http.StatusOK, "Hello World!")
})

r.Run()
}
</code></pre>
<p style="font-weight:700;padding-left:25px;">Python - FastAPI</p>
<pre><code class="python">
from fastapi import FastAPI

app = FastAPI()

@app.get('/')
def read_root():
     return { "hello": "Hello World!" }
</code></pre>
<p>To be fair it is not exactly right to say that Minimal APIs weren't existing in .NET before .NET 6 and C# 10, it was existing but you needed to use a package named NancyFX, a lightweight and low-ceremony framework for building HTTP based services on .Net and Mono but it was pretty confidential:</p>
<p style="font-weight:700;padding-left:25px;">.NET - NancyFX</p>
<div class="pic_wrapper"><img  src="/wwwroot/images/dotnet/minimal-apis-dotnet6-csharp10-nancyfx-github.png" title="" alt="" /></div>
<pre><code class="csharp">
public class SampleModule : Nancy.NancyModule
{
     public SampleModule()
{
     Get["/"] = _ => "Hello World!";
}
}
</code></pre>
<p>If NancyFX is still available notice that this project has been archived on GitHub since .NET Core and is not longer maintained: <a href="https://github.com/NancyFx/Nancy#-announcement----nancy-is-no-longer-being-maintained" title="" target="_Blank" rel="nofollow">** Announcement ** - Nancy is no longer being maintained!</a>.</p>
<p>The code samples below are just a few examples of Minimal APIs in other developments environments but they exists in pretty much of the languages, .NET and C# is one of the last to incorporate them with official support.</p>
<h2>How can they work?</h2>
<p>The Minimal APIs are based on several C# 9 and C# 10 features, mainly C# 10 features:</p>
<ul>
<li>Top-level statements <span style="font-size:10px;font-style:italic;">- C# 9 feature</span></li>
<li>Implicit using statements <span style="font-size:10px;font-style:italic;">- C# 10 feature</span></li>
<li>Global using statements <span style="font-size:10px;font-style:italic;">- C# 10 feature</span></li>
<li>Inferred lambda types <span style="font-size:10px;font-style:italic;">- C# 10 feature</span></li>
<li>Attributes on lambdas <span style="font-size:10px;font-style:italic;">- C# 10 feature</span></li>
</ul>
<p>Let's dig a little about theses features.</p>
<h3>Top-level statements</h3>
<p>Top-level statements enable you to avoid the extra ceremony required by placing your program's entry point in a static method in a class.</p>
<p>Before C# 9, a minimal console application was written with 11 lines:</p>
<pre><code class="csharp">
using System;

namespace Application
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
        }
    }
}
</code></pre>
<p>Since Top-level statements and Implicit and Global using statements you can write a minimal console application with only one line, the only one who actually do something:</p>
<pre><code class="csharp">
Console.WriteLine("Hello, World!");
</code></pre>
<h3>Global using statements</h3>
<p>Global using statements, ame with .NET 6 and C# 10, is the possibility to place all the common using statements in a single file which make them available for use within the entire project so you won't have to put them in the top of each file anymore.</p>
<pre><code class="csharp">
global using System;
global using System.Collections.Generic;
global using System.IO;
global using System.Linq;
</code></pre>
<h3>Implicit using statements</h3>
<p>.NET 6 with C# 10 introduced the support of the implicit namespace for C# projects, which was already existing for Visual Basic projects by the way.</p>
<p>Implicit usings is the possibility for .NET to bring used namespace into the default ones so you don't have to explicitly declare them. Behind the scenes, .NET stores them as global usings into an hidden auto generated file in your obj folder.</p>
<pre><code class="csharp">
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
</code></pre>
<h3>Inferred lambda types</h3>
<p>The Inferred lambda types feature allow you to use var or inline return type in lambdas. Prior to C# 10 you had to explicitly define the delegate type such as Func<T> or Action<T>:</p>
<pre><code class="csharp">
Func<string, string> func = (string firstName, string lastName) => $"Hi! I am {firstName} {lastName}";

Action<string, string> writeName = (string firstName, string lastName) =>
{
    Console.WriteLine($"Hi! I am {firstName} {lastName}");
};
writeName("Adrien", "Torris");
Console.ReadLine();
</code></pre>
<p>It was a bit frustrating to write all this code but since C# 10 the type can be inferred by the compiler. If the compiler cannot determine the type to use it will throw an error so you can define it for him.</p>
<p>So our <code>Func<string, string> func = (string firstName, string lastName) => $"Hi! I am {firstName} {lastName}";</code> line in C# 9 become with C# 10:</p>
<pre><code class="csharp">
var func = (string firstName, string lastName) => $"Hi! I am {firstName} {lastName}";
</code></pre>
<h3>Attributes on lambdas</h3>
<p></p>
<pre><code class="csharp">
var func = [Obsolete](string firstName, string lastName) => $"Hi! I am {firstName} {lastName}";
</code></pre>
<h2>What are Minimal APIs?</h2>
<p>A minimal API has 2 fundamental components:</p>
  <ul>
  <li>the web application builder, where to put all the configuration of the application</li>
  <li>the web application itself, where to configure all the middleware</li>
  </ul>
<pre><code class="csharp">
// Application builder which can access the arguments passed to the application
var builder = WebApplication.CreateBuilder(args);

// Materialization of the configuration builder
var app = builder.Build();

// Start the web application.
app.Run();
</code></pre>
<p>At this point, the application is totally valid and works, but it has no endpoint so it's pretty useless for now.</p>
<p>Before we add some behaviors to this API, notice that you can treat the lines between our tow first as the ConfigureServices of the startup.cs file of our old/current fashion to do web API, and the lines between our two last lines as the Configure method of the startup file.</p>
<pre><code class="csharp">
var builder = WebApplication.CreateBuilder(args);

// ConfigureServices

var app = builder.Build();

// Configure

app.Run();
</code></pre>
<p>Let's add some endpoints now:</p>
<pre><code class="csharp">
var builder = WebApplication.CreateBuilder(args);

// ConfigureServices

var app = builder.Build();

// Configure

app.Run();
</code></pre>
<p>Let's add some endpoints now:</p>
<pre><code class="csharp">
var builder = WebApplication.CreateBuilder(args);

var app = builder.Build();

app.MapGet("hello", () => "Hello You! How are you?");

app.Run();
</code></pre>
<p>I used strings for simplicity here but you can use objects if you want to:</p>
<pre><code class="csharp">
var builder = WebApplication.CreateBuilder(args);

var app = builder.Build();

app.MapGet("hello2", () => new
{
     Message = "Hello You! How are you?"
});

app.Run();
</code></pre>
<p>We also can use the Results class which handle some results behaviors:</p>
<pre><code class="csharp">
var builder = WebApplication.CreateBuilder(args);

var app = builder.Build();

app.MapGet("user", () => Results.Ok(new User("Adrien Torris"));

app.Run();

record User(string fullName);
</code></pre>
<p>We also can use the HTTP context or the HTTP request objects, and use the HTTP response object to customize our response:</p>
<pre><code class="csharp">
var builder = WebApplication.CreateBuilder(args);

var app = builder.Build();

app.MapGet("hello", async (HttpRequest request, HttpResponse response) =>
{
     await response.WriteAsJsonAsync(request.Query);
});

app.Run();
</code></pre>
<p>We made some GET examples but you have a Map method for several HTTP verbs like POST, PUT or DELETE.</p>
<p>The minimal API is capable of dealing with route parameters the same ways than controllers:</p>
<p>var builder = WebApplication.CreateBuilder(args);

var app = builder.Build();

app.MapPost("user/{id:int}", (int id) =>
{
     id
});

app.Run();</p>
<p>You can use the routing API the same way as with controllers:</p>
<p>var builder = WebApplication.CreateBuilder(args);

var app = builder.Build();

app.MapPost("user/{id:int}", ([FromQuery]int id, [FromHeader]string accept, [FromBody]User user) =>
{
     id, accept, user
});

app.Run();

record User(string fullName);</p>
<h2>What minimal API does not support?</h2>
<ul>
<li>No support for filters (It seems that an equivalent of them will coming pretty soon but it won't be the exactly same thing as today so we probably won't use the filters we have in our actual MVC projects).</li>
<li>No built-in support for validation</li>
<li>No support for JsonPatch</li>
<li>No support for OData</li>
<li>No support for APIversioning</li>
</ul>
<p>All the Minimal APIs stuff could seems weird at start because it's a real breaking change compared to the way we developped APIs before .NET 6 but when you think about it, is it not the natural way to do it? After all, all the major environnements has adopted this approach for years and .NET didn't do it sooner for simplicity, because the functionnalities has already been developed in a stack so it was simpler to just use it. But are Controllers and all the MVC stuff really great for APIs? Are APIs that close to MVC websites?</p>
<h2>Why the Controllers approach is weird for APIs?</h2>
<ul>
<li>Controllers are coming from MVC, for which they were designed but APIs does not needs all the MVC stuff</li>
<li>They have method that never call one another, and it's good because generaly there purposes are totally different, so why always put them in the same object?</li>
<li>They violate the Single Responsability principle (depending of your definition of "Single")</li>
<li>They can have services injected that aren't used by all Actions, which is a waste of ressources</li>
<li>They never share states bewteen Actions, so what is the whole point of having them together?</li>
<li>Most of the time even the private methods are used by only one Action</li>
<li>They invoke Middlewares and Filters you do not need, they invoke them because the all stuff comes from MVC (like the validation for example)</li>
<li>They can grow a lot leading to "fat controllers"</li>
</ul>
<h2>Can Minimal APIs have some structure?</h2>
<p><!-- here --></p>
<p>When you think about it, the minimalism and low-ceremony approach seems to be the better one, the "natural one". Call it "Minimal APIs" is maybe a mistake because it infers that it's not the default way to do it, which can be a little scary, when the old fashion is probably the wrong one. Maybe Microsoft should have name "Minimal APIs" just "APIs" and the MVC-way of doing it "Unessential APIs" or "Massive APIs". In any case, .NET 6 brings us an elegant and efficient way of developing APIs that I invite you to discover and try if you haven't already done so. The first step (or second if you are reading theses lines...) should be to watch the brilliant talk of <a href="https://www.youtube.com/watch?v=hPpvlKLeYYA" title="" target="_Blank" rel="nofollow">Nick Chaspas at the NDC London</a>.</p>
<!--
<div class="pic_wrapper"><img  src="/wwwroot/images/dotnet/" title="" alt="" /></div>
<p></p>
<pre><code class="csharp">

</code></pre>-->
<div id="crdny">August 28, 2022</div>
				<div id="tags_wrapper">
					<ul>
						<li>.NET 6</li>
						<li>C# 10</li>
						<li>Minimal APIs</li>
						<li></li>
					</ul>
				</div>
				<div id="refs_wrapper">
				<li><a href="https://www.youtube.com/watch?v=hPpvlKLeYYA" title="" target="_Blank" rel="nofollow">Nick Chaspas at the NDC London</a></li>
				<li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/tutorials/top-level-statements" title="" target="_Blank" rel="nofollow">Top-level statements documentation</a></li>
				<li><a href="https://www.hanselman.com/blog/implicit-usings-in-net-6" title="" target="_Blank" rel="nofollow">Article from Scott Hanselman about Implicit using statements</a></li>
				<li><a href="https://github.com/Elfocrash/clean-minimal-api" title="" target="_Blank" rel="nofollow">Clean minimal API sample by Nick Chaspas</a></li>
				<li><a href="https://github.com/NancyFx/Nancy" title="" target="_Blank" rel="nofollow">NancyFX's GitHub</a></li>
				<!--<li><a href="" title="" target="_Blank" rel="nofollow"></a></li>-->
					</ul>
				</div>
            </div>
			<!--<div id="relatedpostlist_ctn">
				<h2>Related posts</h2>
				<ul>
					<li>
						<a href="" title=""></a>
					</li>
				</ul>
			</div>-->
			<footer>
			</footer>
		</div>
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js" type="text/javascript"></script>
		<script src="/wwwroot/js/Infra.js" type="text/javascript"></script>
		<link type="text/css" rel="stylesheet" href="/wwwroot/lib/highlight/styles/vs.css" />
		<script type="text/javascript" src="/wwwroot/lib/highlight/highlight.pack.js"></script>
		<script type="text/javascript">hljs.initHighlightingOnLoad();</script>
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-85948839-1', 'auto');
  ga('send', 'pageview');

</script>
<script async src="https://www.googletagmanager.com/gtag/js?id=G-F924P8Y6HC"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-F924P8Y6HC');
</script></body></html>
